[server]
host: 0.0.0.0
port: 7125
klippy_uds_address: /tmp/klippy_uds
#   The maximum size allowed for a file upload.  Default is 1024 MiB.
max_upload_size: 1024
#   The port to listen on for SSL (HTTPS) connections.  Note that the HTTPS
#   server will only be started of the certificate and key options outlined
#   below are provied.  The default is 7130.
ssl_port: 7130
#   The path to a self signed ssl certificate.  The default is no path, which
#   disables HTTPS.
#ssl_certificate_path:
#   The path to the private key used to signed the certificate.  The default
#   is no path, which disables HTTPS.
#ssl_key_path:

[file_manager]
#   When set to True the file manager will add uploads to the job_queue when
#   the `start_print` flag has been set. The default if False.
queue_gcode_uploads: False
#   When set to True gcode files will be run through a "preprocessor"
#   during metdata extraction if object tags are detected.  This preprocessor
#   replaces object tags with G-Code commands compatible with Klipper's
#   "cancel object" functionality.  Note that this process is file I/O intensive,
#   it is not recommended for usage on low resource SBCs such as a Pi Zero.
#   The default is False.
enable_object_processing: False


[database]

[data_store]
#   The maximum number of temperature values to store for each sensor. Note
#   that this value also applies to the "target", "power", and "fan_speed"
#   if the sensor reports them. The default is 1200, which is enough to
#   store approximately 20 minutes of data at one value per second.
temperature_store_size: 1200
#   The maximum number "gcode lines" to store. The default is 1000.
gcode_store_size:  1000

[job_queue]
#   When set to true the job queue will attempt to load the next
#   pending job when Klipper reports as "Ready".  If the queue has
#   been paused it will automatically resume.  Note that neither
#   the job_transition_delay nor the job_transition_gcode are
#   applied in this case.  The default is False.
load_on_startup: False
#   When set to True the queue will automatically transition to
#   the next job in the queue after the current job is complete.
#   This is useful for belt printers and other machines with the
#   ability to automate clearing of the build area.  When False
#   the queue will be paused after each job is loaded, requiring
#   that users manually resume to load the next print.  The default
#   is False.
automatic_transition: False
#   The amount of time to delay after completion of a job before
#   loading the next job on the queue.  The default is no delay.
#job_transition_delay:
#   A gcode to execute after the completion of a job before the next
#   job is loaded.  If a "job_transition_delay" has been configured
#   this gcode will run after the delay.  The default is no gcode.
#job_transition_gcode:

[authorization]
#   When set to True a user login is required for authorization if at least
#   one user has been created, overriding the "trusted_clients" configuration.
#   If no users have been created then trusted client checks will apply.
#   The default is False.
force_logins: False
#   The time, in days, after which a user is forced to re-enter their
#   credentials to log in.  This period begins when a logged out user
#   first logs in.  Successive logins without logging out will not
#   renew the timeout.  The default is 90 days.
#login_timeout:
cors_domains:
  *.local  
  *.fritz.box
  *://my.mainsail.xyz
  *://app.fluidd.xyz
  *://voron2
trusted_clients:
    127.0.0.1
    192.168.0.0/16
    ::1/128
    FE80::/10

#[secrets]
#secrets_path: ~/.moonraker_secret.json

[octoprint_compat]
enable_ufp: True
#   When set to True the octoprint_compat module will report that the UFP
#   plugin is available.  If the installed version of Cura supports UFP
#   files will be uploaded in UFP format.  When set to False Cura will
#   upload files in .gcode format.  This setting has no impact on other
#   slicers.  The default is True.

[history]

[timelapse]
##   Following basic configuration is default to most images and don't need
##   to be changed in most scenarios. Only uncomment and change it if your
##   Image differ from standart installations. In most common scenarios 
##   a User only need [timelapse] in there configuration.
#output_path: ~/timelapse/
##   Directory where the generated video will be saved
#frame_path: /tmp/timelapse/
##   Directory where the temporary frames are saved
#ffmpeg_binary_path: /usr/bin/ffmpeg
##   Directory where ffmpeg is installed

[update_manager]
channel: dev
enable_auto_refresh: True
enable_system_updates: True
refresh_interval: 24

[update_manager mainsail]
type: web
channel: beta
repo:  mainsail-crew/mainsail
path: ~/mainsail


[update_manager kiauh]
type: git_repo
path: ~/kiauh
origin: https://github.com/th33xitus/kiauh.git
is_system_service: False


[update_manager crowsnest]
type: git_repo
path: ~/crowsnest
origin: https://github.com/mainsail-crew/crowsnest.git
managed_services: crowsnest

[update_manager timelapse]
type: git_repo
primary_branch: main
path: ~/moonraker-timelapse
origin: https://github.com/mainsail-crew/moonraker-timelapse.git
managed_services: klipper moonraker


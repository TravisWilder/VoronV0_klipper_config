[gcode_macro START_PRINT]
description: Machine heatup procedure before starting a print
gcode:
    # Extruder and bed temperatures
    {% set BED_TEMP = params.BED_TEMP|default(printer["gcode_macro _USER_VARIABLES"].print_default_bed_temp)|float %}
    {% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(printer["gcode_macro _USER_VARIABLES"].print_default_extruder_temp)|float %}

    # Optionnal Z adjustement from the slicer profile (ex. use it if you have textured vs smooth slicer profiles) 
    {% set Z_ADJUST = params.Z_ADJUST|default(0)|float %}
    
    # Heatsoak time of the bed in minutes and chamber temperature wanted
    {% set SOAK = params.SOAK|default(printer["gcode_macro _USER_VARIABLES"].print_default_soak)|int %}
    {% set CHAMBER_TEMP = params.CHAMBER|default(printer["gcode_macro _USER_VARIABLES"].print_default_chamber_temp)|int %}
    {% set CHAMBER_MAXTIME = params.CHAMBER_MAXTIME|default(printer["gcode_macro _USER_VARIABLES"].print_default_chamber_max_heating_time)|int %}
    
    # Default material type to 'XXX'
    {% set MATERIAL = params.MATERIAL|default(printer["gcode_macro _USER_VARIABLES"].print_default_material)|string %}

    # Get bounding box of the first layer
    {% set FL_SIZE = params.SIZE|default("0_0_0_0")|string %}

    # Set vars
    {% set verbose = printer["gcode_macro _USER_VARIABLES"].verbose %}
    {% set St = printer["gcode_macro _USER_VARIABLES"].travel_speed * 60 %}
    {% set Px, Py, Pz = printer["gcode_macro _USER_VARIABLES"].purge_bucket_xyz|map('float') %}
    
    # Set light intensity while printing
    {% set light_intensity_start_print = printer["gcode_macro _USER_VARIABLES"].light_intensity_start_print %}
    {% set light_intensity_printing = printer["gcode_macro _USER_VARIABLES"].light_intensity_printing %}
    
    {% set purge_and_brush_enabled = printer["gcode_macro _USER_VARIABLES"].purge_and_brush_enabled %}
    {% set chamber_sensor_enabled = printer["gcode_macro _USER_VARIABLES"].chamber_temperature_sensor_enabled %}
    {% set zcalib_plugin_enabled = printer["gcode_macro _USER_VARIABLES"].zcalib_plugin_enabled %}
    {% set light_enabled = printer["gcode_macro _USER_VARIABLES"].light_enabled %}
    {% set status_leds_enabled = printer["gcode_macro _USER_VARIABLES"].status_leds_enabled %}
    {% set bed_mesh_enabled = printer["gcode_macro _USER_VARIABLES"].bed_mesh_enabled %}
    {% set force_homing_in_start_print = printer["gcode_macro _USER_VARIABLES"].force_homing_in_start_print %}
    {% set filter_enabled = printer["gcode_macro _USER_VARIABLES"].filter_enabled %}

    {% set flexplate_enabled = printer["gcode_macro _USER_VARIABLES"].flexplate_enabled %}

    {% set prime_line_x, prime_line_y = printer["gcode_macro _USER_VARIABLES"].prime_line_xy|map('float') %}

    {% set max_x = printer.toolhead.axis_maximum.x|float %}
    {% set max_y = printer.toolhead.axis_maximum.y|float %}

    {% if status_leds_enabled %}
        STATUS_LEDS COLOR="BUSY"
    {% endif %}

    {% if ercf_enabled %}
        {% if verbose %}
            RESPOND MSG="ERCF Servo Up"
        {% endif %}
        ERCF_SERVO_UP
    {% endif %}


    CLEAR_PAUSE
   
    BED_MESH_CLEAR
    SET_GCODE_OFFSET Z=0
    M221 S100
    M220 S100
    M104 S170
    G90
    M83
    #LIGHT_ON S={light_intensity_start_print}


    # 1 ----- HOMING ------------------------------------------
    # Home if not already homed and park the head near the center front
    {% if status_leds_enabled %}
        STATUS_LEDS COLOR="HOMING"
    {% endif %}
    {% if force_homing_in_start_print %}
         G28
    {% else %}
         _CG28
    {% endif %} 
    DOCK_PROBE_UNLOCK
    G0 X{max_x|int / 2} Y{max_y|int / 3}  F{St}
    RESPOND MSG="Homing done..."

    # 2 ----- BED HEATSOAK -------------------------------------
    # Heatsoak the bed if SOAK time is set and bed is not already warming up to the correct temperature (+-8Â°C).
    # We make the assumption that the soak is not needed if the bed is already at the correct target.
    # We also use the recirculating filter under the bed (if available) at full power to spread the heat
    # during the heatsoak if a specific temperature need to be reached.
    {% if status_leds_enabled %}
        STATUS_LEDS COLOR="HEATING"
    {% endif %}
    {% if (SOAK > 0) and (printer.heater_bed.target < (BED_TEMP - 8)) %}
        # If the machine is equiped by a chamber temperature sensor and a recirculating filter (check is automatic under the hood),
        # then we look if a specific chamber temperature is needed and we power on the recirculating filter to spread the heat
        {% if CHAMBER_TEMP > 0 and filter_enabled %}
            START_FILTER SPEED=1
        {% endif %}
        # Put the bed temperature target and wait for the soak
        HEATSOAK_BED TEMP={BED_TEMP} SOAKTIME={SOAK}
    {% else %}  
        # If the machine is equiped by a chamber temperature sensor and a recirculating filter (check is automatic under the hood),
        # then we look if a specific chamber temperature is needed and we power on the recirculating filter to spread the heat
        {% if CHAMBER_TEMP > 0 and filter_enabled %}
           START_FILTER SPEED=1
        {% endif %}
        # Only heat the bed to the target and continue
        HEATSOAK_BED TEMP={BED_TEMP} SOAKTIME=0
    {% endif %}


    # 3 ----- CHAMBER HEATSOAK ----------------------------------
    # If a setpoint is defined and a sensor available, then we wait to reach the chamber temperature (with a timeout in case it's winter...)
    # We heat up the extruder a little bit to speed up the process by using the hotend fan. If there is one, the recirculating filter
    # is also be powered on from the previous step and kept like that to act as bed fans
    {% if chamber_sensor_enabled %}
        {% if CHAMBER_TEMP > 0 %}
            M109 S{EXTRUDER_TEMP - 50}
            # Wait for the temperature of the chamber to be reached (default max: 15min)
            HEATSOAK_CHAMBER TEMP={CHAMBER_TEMP} MAXTIME={CHAMBER_MAXTIME}
        {% endif %}
    {% endif %}

    
     
    
    {% if zcalib_plugin_enabled %}
        STATUS_CALIBRATING_Z
        {% if verbose %}
            RESPOND MSG="Auto Z calibration..."
        {% endif %}
        ATTACH_PROBE_LOCK
        COMPUTE_MESH_PARAMETERS SIZE={FL_SIZE}
        CALIBRATE_Z
    {% endif %}

    # Fine adjustement of z offset from the slicer profile (like when using textured/smooth pei)
    SET_GCODE_OFFSET Z_ADJUST={Z_ADJUST} MOVE=1

    # 7 ----- MATERIAL PARAMETERS --------------------------------
    # Material dependant parameters like PA, firmware retraction, Z_offset, etc...
    RESPOND MSG="Material: {MATERIAL}"
    {% if MATERIAL == "PLA" %}
       
     #   SET_RETRACTION RETRACT_LENGTH=0.75 RETRACT_SPEED=40 UNRETRACT_EXTRA_LENGTH=0 UNRETRACT_SPEED=30
    {% elif MATERIAL == "PET" %}
     # SET_GCODE_OFFSET Z_ADJUST=-0.38
        #SET_PRESSURE_ADVANCE ADVANCE=0.0650
      #  SET_GCODE_OFFSET Z_ADJUST=0.010 MOVE=1
      #  SET_RETRACTION RETRACT_LENGTH=1.4 RETRACT_SPEED=30 UNRETRACT_EXTRA_LENGTH=0 UNRETRACT_SPEED=20
    {% elif MATERIAL == "ABS" %}
       #SET_GCODE_OFFSET Z_ADJUST=+0.18
       # SET_PRESSURE_ADVANCE ADVANCE=0.0480
       # SET_RETRACTION RETRACT_LENGTH=0.5 RETRACT_SPEED=40 UNRETRACT_EXTRA_LENGTH=0 UNRETRACT_SPEED=30
        {% if filter_enabled %} # if a filter is available, we start it for ABS
        #    START_FILTER SPEED=0.8
        {% endif %}
    {% endif %}


    # 8 ----- BED MESH -------------------------------------------
    # For the bed mesh, there is two possibilities depending if we use the auto z calibration plugin:
    #  - If yes, then the mesh should already be computed by a call to COMPUTE_MESH_PARAMETERS in section 6
    #    because we already needed to use the mesh_center point as a parameter to the z calibration command
    #  - If no, then we need to use the SIZE parameter to the ADAPTIVE_BED_MESH call to do all at once now
    #STATUS_MESHING
   
    {% if verbose %}
        RESPOND MSG="Bed mesh measurement..."
    {% endif %}
    G28
    {% if bed_mesh_enabled %}
        {% if status_leds_enabled %}
            STATUS_LEDS COLOR="MESHING"
        {% endif %}
        {% if verbose %}
            RESPOND MSG="Bed mesh measurement..."
        {% endif %}
        {% if zcalib_plugin_enabled %}
            ADAPTIVE_BED_MESH
        {% else %}
            
            ADAPTIVE_BED_MESH SIZE={FL_SIZE}
        {% endif %}
    {% endif %}

    RESPOND MSG="EXTRUDER HEATING"
    # 5 ----- EXTRUDER HEATING ---------------------------------
    # Heat the nozzle to print temperature ontop of the purge bucket
    # and wait 30s to let the nozzle dilate and stabilize
    #STATUS_HEATING
    G1 X{prime_line_x} Y{prime_line_y} Z1 F{St}
    #G1 X{Px} Y{Py} Z{Pz|int + 20} F{St}
    M109 S{EXTRUDER_TEMP}
    G4 P{60000 * 0.5}
    {% if verbose %}
        RESPOND MSG="Extruder temperature OK"
    {% endif %}

    RESPOND MSG="EXTRUDER HEATING done"

    {% if flexplate_enabled %}
        _SET_PLATE_OFFSET
    {% endif %}


    # 9 ----- PRINT !!! -------------------------------------------
    # Do a prime line, lower the lighs and start the print
    {% if status_leds_enabled %}
        STATUS_LEDS COLOR="PRINTING"
    {% endif %}

    {% if verbose %}
        RESPOND MSG="Start printing !"
    {% endif %}
    PRIME_LINE

    {% if light_enabled %}
        LIGHT_ON S={light_intensity_printing}
    {% endif %}
    
    G92 E0.0

[gcode_macro PRIME_LINE]
gcode: 
  G92 E0
  G1 X5 Y110 Z0.85 F12000;
  G1 X20 Y110 E40 F100;
  G1 X35 F32000;

[gcode_macro PRIME_LINE_OLD]
gcode:
    # Set vars
    {% set St = printer["gcode_macro _USER_VARIABLES"].travel_speed * 60 %}
    {% set Sz = printer["gcode_macro _USER_VARIABLES"].z_drop_speed * 60 %}
    {% set prime_line_x, prime_line_y = printer["gcode_macro _USER_VARIABLES"].prime_line_xy|map('float') %}

    G91
    M83
    G1 Z5 F{Sz}

    ; Starting position
    G90
    G1 X{prime_line_x} Y{prime_line_y} F{St}
    G1 Z0.3 F{Sz|int / 2}

    ; Add pressure in the nozzle
    G92 E0
    G1 E18 F300

    ; Prime line
    G92 E0
    G1 X{prime_line_x +20} E9 F2500
    G92 E0
    G1 X{prime_line_x + 50} E5 F1500

    ; Retract and Z-hop
    G92 E0
    G1 Z2.0 E-0.1 F{Sz}
    G92 E0
    G1 Z5 F{Sz}
    
[gcode_macro _DO_ERROR_ERCF_PAUSE]
gcode:
    {% if printer.ercf.is_paused.status_ercf|int == 1 %}
        {action_raise_error("ERROR ERCF !!! UNLOCK ERCF FIRST and restart start_print macro.")}
    {% else %}
        {% if verbose %}
            RESPOND MSG="ERCF not paused"
        {% endif %}
    {% endif %}
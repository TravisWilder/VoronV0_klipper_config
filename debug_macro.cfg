#####################################################################
#  Macros to debug the printer variable
#####################################################################
[gcode_macro DUMP_PARAMETERS]
description: Debug: Print all entries of the printer object
gcode:
  {% set parameters = namespace(output = '') %}
  {% for name1 in printer %}
    {% for name2 in printer[name1] %}
      {% set donotwant = ['configfile'] %}
      {% if name1 is not in donotwant %}
        {% set param = "printer['%s'].%s = %s" % (name1, name2, printer[name1][name2]) %}
        {% set parameters.output = parameters.output +  param + "\n" %}
      {% endif %}
    {% endfor %}
  {% endfor %}
  {action_respond_info(parameters.output)}

[gcode_macro DUMP_CONFIG]
description: Debug: Print all entries of the printer config object
gcode:
  {% set parameters = namespace(output = '') %}
  {% for name1 in printer.configfile.config %}
    {% set show = ['printer', "bed_mesh VORON-0C-MUELLER"] %}
    {% if name1 is in show %}
      {% set param = "printer.configfile.config['%s'] = %s" % (name1, printer.configfile.config[name1]) %}
      {% set parameters.output = parameters.output +  param + "\n" %}
    {% endif %}
  {% endfor %}
  {action_respond_info(parameters.output)}
  
[gcode_macro DUMP_SETTINGS]
description: Debug: Print all entries of the printer settings object
gcode:
  {% set parameters = namespace(output = '') %}
  {% for name1 in printer.configfile.settings %}
    {% set show = ['servo probe_dock'] %}
    {% if name1 is in show %}
      {% set param = "printer.configfile.settings['%s'] = %s" % (name1, printer.configfile.settings[name1]) %}
      {% set parameters.output = parameters.output +  param + "\n" %}
    {% endif %}
  {% endfor %}
  {action_respond_info(parameters.output)}

[gcode_macro SEARCH_VARS]
description: Search printer.name use S=""
gcode:
    {% set search = params.S|lower %}
    {% set ns = namespace() %}
    {% for item in printer  %}
        {% if ' ' in item %}
            {% set ns.path = ['printer', "['%s']" % (item), ''] %}
        {% else %}
            {% set ns.path = ['printer.', item, ''] %}   
        {% endif %} 
        {% if search in ns.path|lower %}
            { action_respond_info(ns.path|join) }
        {% endif %} 
        {% if printer[item].items() %}
            {% for childkey, child in printer[item].items() recursive %}
                {% set ns.path = ns.path[:loop.depth|int + 1] %}
                {% if ' ' in childkey %}
                    {% set null = ns.path.append("['%s']" % (childkey)) %}
                {% else %}
                    {% set null = ns.path.append(".%s" % (childkey)) %}
                {% endif %} 
                {% if child is mapping  %}
                    { loop(child.items()) }
                {% else %}
                    {% if search in ns.path|lower %}
                        { action_respond_info("%s : %s" % (ns.path|join, child)) }   
                    {% endif %} 
                {% endif %} 
            {% endfor %}
        {% endif %} 
    {% endfor %}

#####################################################################
#  Macros needed for several debug activities
#####################################################################
[gcode_macro mesh_move_test]
gcode:
  G90
  G1 Z10
  M400
  _TAKE_POS
  G1 X232 Y355 F6000  ; move to z-endstop
  M400
  _TAKE_POS
  G1 X175 Y175 F6000  ; move to middle
  M400
  T_AKE_POS
  G1 X30 Y30 F6000   ; move to left front mesh point
  M400
  _TAKE_POS
  G1 X320 Y30 F6000  ; move to left back mesh point
  M400
  _TAKE_POS
  G1 X320 Y320 F6000 ; move to right back mesh point
  M400
  _TAKE_POS
  G1 X30 Y320 F6000  ; move to right front mesh point
  M400
  T_AKE_POS

[delayed_gcode _PRINT_POS]
gcode:
  _TAKE_POS
  UPDATE_DELAYED_GCODE ID=_PRINT_POS DURATION=1

[gcode_macro _TAKE_POS]
gcode:
  {% set th_pos = printer.toolhead.position %}
  {% set gm_pos = printer.gcode_move.position %}
  {% set gc_pos = printer.gcode_move.gcode_position %}
  {action_respond_info("TH position: %.2f %.2f %.2f [%.3f]
                        GM position: %.2f %.2f %.2f [%.3f]
                        GC position: %.2f %.2f %.2f [%.3f]" % (th_pos.x|float, th_pos.y|float, th_pos.z|float, th_pos.e|float,
                                                               gm_pos.x|float, gm_pos.y|float, gm_pos.z|float, gm_pos.e|float,
                                                               gc_pos.x|float, gc_pos.y|float, gc_pos.z|float, gc_pos.e|float))}
 "{state}"'
